#+TITLE: Joseph Morgan's Emacs package configuration
#+PROPERTY: header-args:emacs-lisp :results none :tangle ~/.dotfiles/emacs/.emacs.d/package-init.el

* Boilerplate

Package configuration for my emacs installation.

#+begin_src emacs-lisp
  (require 'package)

  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

#+end_src

* Org

org-font-setup is a helper function that configures a handful of cosmetic options that improve the general look-and-feel of org mode.

#+begin_src emacs-lisp

  (defun config/org-font-setup ()
    (org-indent-mode)
    (org-superstar-mode)
    (visual-line-mode 1)
    (variable-pitch-mode 1)
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Noto Sans" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

Imports and configures the org package. 

#+begin_src emacs-lisp

  (use-package org
    :ensure t
    :config (setq org-ellipsis " ▼"
                  org-hide-emphasis-markers t
                  org-agenda-files '("~/org/")
                  org-startup-indented 1
                  org-startup-folded 1
                  org-default-notes-file (concat org-directory "/inbox.org")
                  org-agenda-window-setup 'only-window
                  org-export-with-section-numbers nil
                  org-deadline-warning-days 28
                  org-format-latex-options (plist-put org-format-latex-options :scale 1.25)
                  org-agenda-custom-commands '(("D" "Upcoming Deadlines" tags "DEADLINE>=\"<today>\""))
                  org-file-apps '((auto-mode . emacs)
                                  (directory . emacs)
                                  ("\\.mm\\'" . default)
                                  ("\\.x?html?\\'" . default)
                                  ("\\.pdf\\'" . "zathura \"%s\"")))
    (define-key global-map "\C-cc" 'org-capture)
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (java . t)
       (shell . t)
       (emacs-lisp . t)
       (python . t)))
    (setq org-confirm-babel-evaluate nil)
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist  '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist  '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist  '("py" . "src python"))
    (add-hook 'org-mode-hook #'config/org-font-setup)
    (add-hook 'org-mode-hook #'turn-on-flyspell))

#+end_src

** org-superstar

Changes the appearance of org-mode bullet points.

#+begin_src emacs-lisp

  (use-package org-superstar
    :after org
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** visual-fill-column

Makes org mode buffers look more like a document editor by adding gutters to either side and wrapping long lines of text.

#+begin_src emacs-lisp

  (defun config/visual-fill-column-setup()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode))

  (use-package visual-fill-column
    :ensure t
    :config
    (add-hook 'org-mode-hook #'config/visual-fill-column-setup))

#+end_src

** org-cliplink

Takes a link from the clipboard, tries to resolve it to get the title, and stores it in an org-mode buffer.

#+begin_src emacs-lisp

  (use-package org-cliplink
    :ensure t)

#+end_src

* Evil

~evil-mode~ is a vim emulation layer for Emacs that allows vim navigation.

#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    :init
    (setq evil-respect-visual-line-mode t) 
    (setq evil-want-C-i-jump 't)
    (setq evil-want-keybinding nil)
    :config
    (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
    (evil-mode 1))

  (use-package undo-tree
    :ensure t
    :after evil
    :config
    (global-undo-tree-mode)
    (evil-set-undo-system 'undo-tree))

#+end_src

** evil-collection

~evil-collection~ applies vim keybinds to modes and buffers that aren't covered by ~evil-mode~ itself.

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src

** evil-org

~evil-org~ enables vim navigation in orgmode buffers like the agenda view.

#+begin_src emacs-lisp

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src

* Yasnippet 

[[https://github.com/joaotavora/yasnippet][GitHub - joaotavora/yasnippet: A template system for Emacs]]

Yasnippet is a template system for emacs. It allows you to type an abbreviation and automatically expand it into function templates.

#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

#+end_src

** Yasnippet-snippets

A collection of snippets to be used with yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet-snippets
    :after yasnippet
    :ensure t)

#+end_src

* Which Key

[[https://github.com/justbur/emacs-which-key][GitHub - justbur/emacs-which-key: Emacs package that displays available keybi...]]

Which key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command.

#+begin_src emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+end_src

* Magit

[[https://github.com/magit/magit][GitHub - magit/magit: It's Magit! A Git porcelain inside Emacs.]]

Magit is an interface to the version control system git.

#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status))

#+end_src

* Diminish

[[https://github.com/emacsmirror/diminish][GitHub - emacsmirror/diminish: Diminished modes are minor modes with no model...]]

Diminish implements hiding or abreviation of the mode line displays of minor-modes.

#+begin_src emacs-lisp

  (use-package diminish
    :defer t
    :ensure t)

#+end_src

* All the Icons

[[https://github.com/domtronn/all-the-icons.el][GitHub - domtronn/all-the-icons.el: A utility package to collect various Icon...]]

Provides icons for different filetypes.

#+begin_src emacs-lisp

  (use-package all-the-icons :ensure t)

#+end_src

* Ibuffer 

[[https://www.emacswiki.org/emacs/IbufferMode][EmacsWiki: Ibuffer Mode]]

An advanced replacement for ~BufferMenu~, which lets you operate on buffers in much the same manner as ~Dired~.

#+begin_src emacs-lisp

  (use-package ibuffer
    :ensure t
    :bind (("C-x C-b" . ibuffer)))

#+end_src

* Ivy

[[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper: Ivy - a generic completion frontend for Emacs, Swipe...]]

Ivy is a generic completion mechanism for Emacs. 

#+begin_src emacs-lisp

  (use-package ivy
    :ensure t
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-partial-or-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init (ivy-mode 1))

#+end_src

** ivy-rich

[[https://github.com/Yevgnen/ivy-rich][GitHub - Yevgnen/ivy-rich: More friendly interface for ivy.]]

More friendly interface for ivy

#+begin_src emacs-lisp

  (use-package ivy-rich
    :ensure t
    :after ivy
    :init (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full-ivy-rich-path-style 'abbrev))

#+end_src

** Counsel

[[https://elpa.gnu.org/packages/counsel.html][GNU ELPA - counsel]]

~ivy-mode~ ensures that any Emacs command using ~completing-read-function~ uses ivy for completion. Counsel takes this further, providing versions of common Emacs commands that are customized to make the best use of Ivy.

#+begin_src emacs-lisp

  (use-package counsel-projectile
    :ensure t)

  (use-package counsel
    :ensure t
    :after ivy
    :config
    (counsel-mode t)
    (counsel-projectile-mode t)
    :config (setq ivy-initial-inputs-alist nil)
    :bind (("C-c k" . counsel-ag)))

#+end_src

* Swiper

[[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper: Ivy - a generic completion frontend for Emacs, Swipe...]]

Swiper is an alternative to isearch that uses Ivy to show an overview of all matches.

#+begin_src emacs-lisp

  (use-package swiper
    :ensure t
    :after ivy)

#+end_src

* Projectile

[[https://github.com/bbatsov/projectile][GitHub - bbatsov/projectile: Project Interaction Library for Emacs]]

Projectile is a project interaction library for Emacs. Its goal is to prive a nice set of features operating on a project level. Similar to Ctrl+p in Vim. 

#+begin_src emacs-lisp

  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/dev/")
      (setq projectile-project-search-path '("~/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

* Python

** Elpy

[[https://elpy.readthedocs.io/en/latest/][Elpy — Elpy 1.35.0 documentation]]

Elpy is the Emacs Python Development Environment.

#+begin_src emacs-lisp

  (use-package elpy
    :ensure t
    :defer t
    :init
    (elpy-enable))

#+end_src

** Blacken 

[[https://github.com/pythonic-emacs/blacken][GitHub - pythonic-emacs/blacken: Python Black for Emacs]]

Uses the Python package ~black~ to reformat python files.

#+begin_src emacs-lisp

  (use-package blacken :ensure t)

#+end_src

* Helpful

[[https://github.com/Wilfred/helpful][GitHub - Wilfred/helpful: A better Emacs *help* buffer]]

Helpful is an alternative to the built-in Emacs help that provides much more contextual information.

#+begin_src emacs-lisp

  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* VS Dark Theme

[[https://github.com/emacs-vs/vs-dark-theme][GitHub - emacs-vs/vs-dark-theme: Visual Studio IDE dark theme]]

VS Dark Theme is a dark mode theme based off of Visual Studio

#+begin_src emacs-lisp

  (use-package vscdark-theme
    :ensure t
    :config
    (load-theme 'vscdark t))

#+end_src

* Doom Themes

[[https://github.com/doomemacs/themes][GitHub - doomemacs/themes: A megapack of themes for GNU Emacs.]]

A theme megapack for GNU Emacs.

#+begin_src emacs-lisp

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-one t))

#+end_src

* Doom Modeline

[[https://github.com/seagle0128/doom-modeline][GitHub - seagle0128/doom-modeline: A fancy and fast mode-line inspired by min...]]

A replacement for the standard Emacs modeline that is inspired by minimalism design.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-height 10)
    :config (setq doom-modeline-icon (display-graphic-p))
    :hook (after-init . doom-modeline-mode))

#+end_src

* Flycheck

[[https://www.flycheck.org/en/latest/][Flycheck — Syntax checking for GNU Emacs — Flycheck 32-cvs documentation]]

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs.


#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))

#+end_src

* Org Roam

[[https://www.orgroam.com/manual.html#Installing-from-MELPA][Org-roam User Manual]]

Org Roam is a networked knowledge system built on org mode.

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol)

#+end_src

** Configuring where the org roam buffer shows up

#+begin_src emacs-lisp

  (add-to-list 'display-buffer-alist
               '("\\org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . bottom)
                 (window-height . 0.25)))

#+end_src

** Configuring Org Roam Dailies

[[id:e907f077-060f-47ab-8e72-d5adbba3198e][Org Roam Dailies]]

#+begin_src emacs-lisp

  (setq org-roam-dailies-directory "daily/")

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n")))))

#+end_src

* Org Roam UI

[[https://github.com/org-roam/org-roam-ui][GitHub - org-roam/org-roam-ui: A graphical frontend for exploring your org-ro...]]

#+begin_src emacs-lisp
  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :after org-roam ;; or :after org
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

